"use strict";

var _ = require(".");

// For now, we cannot test bigint as jest does not support it
it.each([["IsString", "test string", _.IsString], ["IsNumber", 123, _.IsNumber], ["IsSymbol", Symbol(123), _.IsSymbol], ["IsBoolean", false, _.IsBoolean], ["IsFunction", function () {}, _.IsFunction], ["IsDate", new Date(2000, 1, 1), _.IsDate], ["IsLiteral", "Literal", (0, _.IsLiteral)("Literal")], ["IsArray of numbers", [1, 2, 3, 4], (0, _.IsArray)(_.IsNumber)], ["IsArray of strings", ["1", "2"], (0, _.IsArray)(_.IsString)], ["IsUnion of Test or 123 p1", "Test", (0, _.IsUnion)((0, _.IsLiteral)("Test"), (0, _.IsLiteral)(123))], ["IsUnion of Test or 123 p2", 123, (0, _.IsUnion)((0, _.IsLiteral)("Test"), (0, _.IsLiteral)(123))], ["IsObject with number", {
  test: 123
}, (0, _.IsObject)({
  test: _.IsNumber
})], ["IsIntersection", {
  test: 123,
  other: "test"
}, (0, _.IsIntersection)((0, _.IsObject)({
  test: _.IsNumber
}), (0, _.IsObject)({
  other: _.IsString
}))], ["IsIntersection with dictionary", {
  test: 123,
  other: "test"
}, (0, _.IsIntersection)((0, _.IsDictionary)(_.IsNumber), (0, _.IsObject)({
  other: _.IsString
}))], ["IsIntersection with dictionary of objects and null other item", {
  test: {
    id: 1
  },
  other: null
}, (0, _.IsIntersection)((0, _.IsDictionary)((0, _.IsObject)({
  id: _.IsNumber
})), (0, _.IsObject)({
  other: (0, _.Optional)(_.IsString)
}))], ["IsDictionary of numbers", {
  test: 123,
  other: 321
}, (0, _.IsDictionary)(_.IsNumber)], ["IsDictionary of string", {
  test: "123",
  other: "321"
}, (0, _.IsDictionary)(_.IsString)], ["Optional", undefined, (0, _.Optional)(_.IsNumber)], ["DotNotCare on string", "test", _.DoNotCare], ["DoNotCare on date", Date.UTC(2000, 1, 1), _.DoNotCare], ["Tuple", ["test", 123], (0, _.IsTuple)(_.IsString, _.IsNumber)]])("Correctly assignes to true for %s", function (name, data, checker) {
  expect(checker(data)).toBe(true);
});
it.each([["IsString", 123, _.IsString], ["IsNumber", "test string", _.IsNumber], ["IsSymbol", 123, _.IsSymbol], ["IsBoolean", 123, _.IsBoolean], ["IsFunction", 123, _.IsFunction], ["IsDate", 123, _.IsDate], ["IsLiteral", "No Literal", (0, _.IsLiteral)("Literal")], ["IsArray of numbers", ["1", "2"], (0, _.IsArray)(_.IsNumber)], ["IsArray of strings", [1, 2, 3, 4], (0, _.IsArray)(_.IsString)], ["IsUnion of Test or 123 p1", "Not a test", (0, _.IsUnion)((0, _.IsLiteral)("Test"), (0, _.IsLiteral)(123))], ["IsUnion of Test or 123 p2", 321, (0, _.IsUnion)((0, _.IsLiteral)("Test"), (0, _.IsLiteral)(123))], ["IsObject with number", {
  test: "test string"
}, (0, _.IsObject)({
  test: _.IsNumber
})], ["IsIntersection", {
  test: "test string",
  other: 123
}, (0, _.IsIntersection)((0, _.IsObject)({
  test: _.IsNumber
}), (0, _.IsObject)({
  other: _.IsString
}))], ["IsIntersection with dictionary", {
  other: "test"
}, (0, _.IsIntersection)((0, _.IsDictionary)(_.IsNumber), (0, _.IsObject)({
  other: _.IsString
}))], ["IsDictionary of numbers", {
  test: "123",
  other: 321
}, (0, _.IsDictionary)(_.IsNumber)], ["Optional", false, (0, _.Optional)(_.IsNumber)], ["Tuple", [123, "test"], (0, _.IsTuple)(_.IsString, _.IsNumber)]])("Correctly assignes to false for %s", function (name, data, checker) {
  expect(checker(data)).toBe(false);
});
it("Throws error for assert", function () {
  expect(function () {
    return (0, _.Assert)(_.IsString, 123);
  }).toThrowError();
});
it("Does not throw if correct type", function () {
  expect(function () {
    return (0, _.Assert)(_.IsString, "123");
  }).not.toThrowError();
});
it("Does not throw if correct type deep", function () {
  expect(function () {
    return (0, _.Assert)((0, _.IsObject)({
      parameter: _.IsString
    }), {
      parameter: "test"
    });
  }).not.toThrowError();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,